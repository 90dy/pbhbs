"use strict";
/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const pify = require("pify");
const rimraf = require("rimraf");
exports.readFilep = pify(fs.readFile);
exports.rimrafp = pify(rimraf);
exports.writeFileAtomicp = pify(require('write-file-atomic'));
function readJsonp(jsonPath) {
    return __awaiter(this, void 0, void 0, function* () {
        return JSON.parse(yield exports.readFilep(jsonPath));
    });
}
exports.readJsonp = readJsonp;
function nop() {
    /* empty */
}
exports.nop = nop;
/**
 * Find the tsconfig.json, read it, and return parsed contents.
 * @param rootDir Directory where the tsconfig.json should be found.
 * If the tsconfig.json file has an "extends" field hop down the dependency tree
 * until it ends or a circular reference is found in which case an error will be
 * thrown
 */
function getTSConfig(rootDir, customReadFilep) {
    return __awaiter(this, void 0, void 0, function* () {
        customReadFilep = customReadFilep || exports.readFilep;
        const readArr = new Set();
        return yield getBase('tsconfig.json', customReadFilep, readArr, rootDir);
    });
}
exports.getTSConfig = getTSConfig;
/**
 * Recursively iterate through the dependency chain until we reach the end of
 * the dependency chain or encounter a circular reference
 * @param filePath Filepath of file currently being read
 * @param customReadFilep The file reading function being used
 * @param readFiles an array of the previously read files so we can check for
 * circular references
 * returns a ConfigFile object containing the data from all the dependencies
 */
function getBase(filePath, customReadFilep, readFiles, currentDir) {
    return __awaiter(this, void 0, void 0, function* () {
        customReadFilep = customReadFilep || exports.readFilep;
        filePath = path.resolve(currentDir, filePath);
        // An error is thrown if there is a circular reference as specified by the
        // TypeScript doc
        if (readFiles.has(filePath)) {
            throw new Error(`Circular reference in ${filePath}`);
        }
        readFiles.add(filePath);
        try {
            const json = yield customReadFilep(filePath, 'utf8');
            let contents = JSON.parse(json);
            if (contents.extends) {
                const nextFile = yield getBase(contents.extends, customReadFilep, readFiles, path.dirname(filePath));
                contents = combineTSConfig(nextFile, contents);
            }
            return contents;
        }
        catch (err) {
            throw new Error(`${filePath} Not Found`);
        }
    });
}
/**
 * Takes in 2 config files
 * @param base is loaded first
 * @param inherited is then loaded and overwrites base
 */
function combineTSConfig(base, inherited) {
    const result = { compilerOptions: {} };
    Object.assign(result, base, inherited);
    Object.assign(result.compilerOptions, base.compilerOptions, inherited.compilerOptions);
    delete result.extends;
    return result;
}
//# sourceMappingURL=util.js.map