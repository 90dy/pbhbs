"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const chalk_1 = require("chalk");
const util_1 = require("./util");
/**
 * Remove files generated by the build.
 */
function clean(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const tsconfig = (yield util_1.getTSConfig(options.targetRootDir));
        if (tsconfig.compilerOptions && tsconfig.compilerOptions.outDir) {
            const outDir = tsconfig.compilerOptions.outDir;
            if (outDir === '.') {
                options.logger.error(`${chalk_1.default.red('ERROR:')} ${chalk_1.default.gray('compilerOptions.outDir')} ` +
                    `cannot use the value '.'.  That would delete all of our sources.`);
                return false;
            }
            const message = `${chalk_1.default.red('Removing')} ${outDir} ...`;
            options.logger.log(message);
            yield util_1.rimrafp(outDir);
            return true;
        }
        else {
            options.logger.error(`${chalk_1.default.red('ERROR:')} The ${chalk_1.default.gray('clean')} command` +
                ` requires ${chalk_1.default.gray('compilerOptions.outDir')} to be defined in ` +
                `tsconfig.json.`);
            return false;
        }
    });
}
exports.clean = clean;
//# sourceMappingURL=clean.js.map